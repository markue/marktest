<%
#--
#   Copyright (C) 2011 Gitorious AS
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU Affero General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU Affero General Public License for more details.
#
#   You should have received a copy of the GNU Affero General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#++
%>

<% @page_title = t("views.graphs.title", :repo_url => h(@repository.url_path), :ref => h(@ref)) -%>
<%= breadcrumbs_from(@root) -%>

<ul class="horizontal meta" style="float:right">
  <li>
    <%= link_to "Commit log", project_repository_commits_in_ref_path(@project,
    @repository, params[:branch]) %>
  </li>
</ul>
<h1>
  <%= t("views.graphs.title", :repo_url => h(@repository.url_path), :ref => h(@ref)) -%>
</h1>

<% cache([repo_owner_path(@repository, [@project, @repository]), :graphs, @ref, params[:type]], {:expires_in => 10.minutes}) do -%>
  <div class="capillary" id="capillary-log"
       data-id-url="<%= "/#{@project.slug}/#{@repository.name}/graph/{{id}}" %>"
       data-message-url="<%= "/#{@project.slug}/#{@repository.name}/commit/{{id}}" %>"
       data-capillary-url="<%= url_for(:controller => "api/graphs", :action => "show", :branch => params[:branch], :type => params[:type]) %>">
    <h2>This page requires JavaScript</h2>
  </div>

  <%= javascript_include_tag capillary_js_paths + ["gitorious/log-graph"], :cache => "capillary" %>
<% end -%>

<% content_for :sidebar do -%>
  <ul class="sidebar-meta">
    <li>
      <strong><%= t("views.logs.project") %>:</strong>
      <%= link_to h(@repository.project.title), @repository.project -%>
    </li>
    <li>
      <strong><%= t("views.repos.owner") %>:</strong>
      <%= link_to h(@repository.owner.to_param_with_prefix), @repository.owner -%>
    </li>
    <% unless @commits.blank? -%>
    <li>
      <strong><%= t("views.logs.head_tree") %>:</strong>
      <%= link_to h(@commits.first.tree.id[0,7]),
          project_repository_graph_in_ref_path(:branch => @commits.first.id) -%>
    </li>
    <% end -%>
  </ul>

  <ul class="links navigation">
    <% if params[:type] != "all" %>
      <li><%= link_to t("views.graphs.type_all"),
              project_repository_graph_in_ref_path(:branch => params[:branch], :type => "all") -%></li>
    <% else %>
      <li><%= link_to t("views.graphs.type_normal"),
              project_repository_graph_in_ref_path(:branch => params[:branch], :type => "") -%></li>
    <% end %>
    <%= render_download_links(@project, @repository, params[:branch], :only_list_items => true) %>
  </ul>

  <% cache([project_repository_graph_path, :tags_and_branches],
           { :expires_in => 10.minutes }) do -%>
    <ul class="icon_list links navigation">
      <h5 id="branches"><%= t("views.logs.branches") %>:</h5>
      <% sorted_git_heads(@git.branches).each do |branch| -%>
        <li><%= link_to h(branch.name), project_repository_graph_in_ref_path(:branch => ensplat_path(branch.name)), :title => h(branch.name) -%></li>
      <% end -%>
    </ul>

    <% unless @git.tags.blank? -%>
      <ul class="icon_list links navigation">
	<h5 id="tags"><%= t("views.logs.tags") %>:</h5>
        <% @git.tags.sort{|a, b| a.name <=> b.name }.each do |tag| -%>
          <li><%= link_to h(tag.name), project_repository_graph_in_ref_path(:branch => ensplat_path(tag.commit.id)), :title => h(tag.name) -%></li>
        <% end -%>
      </ul>
    <% end -%>
  <% end -%>
<% end -%>
